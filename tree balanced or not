#include<iostream>
using namespace std;
class node{
    public:
    int data;
    node* left;
    node* right;
    node(int data)
    {
        this->data=data;
        this->left=NULL;
        this->right=NULL;
    }
};
node* buildTree()
{
    int data;
    cout<<"enter the data"<<endl;
    cin>>data;
    if(data==-1){
        return NULL;
    }
    node* root= new node(data);
    cout<<"enter data for left of"<<data<< "node"<<endl;
    root->left= buildTree();
    cout<<"enter data for right of"<<data<<"node"<<endl;
    root->right= buildTree();
    return root;
}
int height(node* root){
    if(root==NULL){
        return 0;
    }
    int leftHeight=height(root->left);
    int rightHeight=height(root->right);
    int ans=max(leftHeight,rightHeight)+1;
    return ans;
} 
bool isBalanced(node* root){
    if(root==NULL){
        return true;
    }
    int leftHeight=height(root->left);
    int rightHeight=height(root->right);
    if(leftHeight-rightHeight==-1||leftHeight-rightHeight==0||leftHeight-rightHeight==1){
        return true;
    }
    else{
        return false;
    }
}
int main(){
    node* root=NULL;
     root= buildTree();
     cout<<endl;
     cout<<"the tree is balanced:"<< isBalanced(root)<<endl;

    
}
